// Generated by gencpp from file laam_laser_control/MsgInfo.msg
// DO NOT EDIT!


#ifndef LAAM_LASER_CONTROL_MESSAGE_MSGINFO_H
#define LAAM_LASER_CONTROL_MESSAGE_MSGINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace laam_laser_control
{
template <class ContainerAllocator>
struct MsgInfo_
{
  typedef MsgInfo_<ContainerAllocator> Type;

  MsgInfo_()
    : header()
    , time()
    , track_number(0)  {
    }
  MsgInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(_alloc)
    , track_number(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_type;
  _time_type time;

   typedef int32_t _track_number_type;
  _track_number_type track_number;





  typedef boost::shared_ptr< ::laam_laser_control::MsgInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laam_laser_control::MsgInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MsgInfo_

typedef ::laam_laser_control::MsgInfo_<std::allocator<void> > MsgInfo;

typedef boost::shared_ptr< ::laam_laser_control::MsgInfo > MsgInfoPtr;
typedef boost::shared_ptr< ::laam_laser_control::MsgInfo const> MsgInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laam_laser_control::MsgInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laam_laser_control::MsgInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::laam_laser_control::MsgInfo_<ContainerAllocator1> & lhs, const ::laam_laser_control::MsgInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.track_number == rhs.track_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::laam_laser_control::MsgInfo_<ContainerAllocator1> & lhs, const ::laam_laser_control::MsgInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace laam_laser_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::laam_laser_control::MsgInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laam_laser_control::MsgInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laam_laser_control::MsgInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laam_laser_control::MsgInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laam_laser_control::MsgInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laam_laser_control::MsgInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laam_laser_control::MsgInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e43375f64afc0ea18fe6ceb84397eb65";
  }

  static const char* value(const ::laam_laser_control::MsgInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe43375f64afc0ea1ULL;
  static const uint64_t static_value2 = 0x8fe6ceb84397eb65ULL;
};

template<class ContainerAllocator>
struct DataType< ::laam_laser_control::MsgInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laam_laser_control/MsgInfo";
  }

  static const char* value(const ::laam_laser_control::MsgInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laam_laser_control::MsgInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string time\n"
"int32 track_number\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::laam_laser_control::MsgInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laam_laser_control::MsgInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.track_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laam_laser_control::MsgInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laam_laser_control::MsgInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time);
    s << indent << "track_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAAM_LASER_CONTROL_MESSAGE_MSGINFO_H
