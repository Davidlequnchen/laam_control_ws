// Generated by gencpp from file laam_laser_control/MsgEmission.msg
// DO NOT EDIT!


#ifndef LAAM_LASER_CONTROL_MESSAGE_MSGEMISSION_H
#define LAAM_LASER_CONTROL_MESSAGE_MSGEMISSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laam_laser_control
{
template <class ContainerAllocator>
struct MsgEmission_
{
  typedef MsgEmission_<ContainerAllocator> Type;

  MsgEmission_()
    : emission(false)  {
    }
  MsgEmission_(const ContainerAllocator& _alloc)
    : emission(false)  {
  (void)_alloc;
    }



   typedef uint8_t _emission_type;
  _emission_type emission;





  typedef boost::shared_ptr< ::laam_laser_control::MsgEmission_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laam_laser_control::MsgEmission_<ContainerAllocator> const> ConstPtr;

}; // struct MsgEmission_

typedef ::laam_laser_control::MsgEmission_<std::allocator<void> > MsgEmission;

typedef boost::shared_ptr< ::laam_laser_control::MsgEmission > MsgEmissionPtr;
typedef boost::shared_ptr< ::laam_laser_control::MsgEmission const> MsgEmissionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laam_laser_control::MsgEmission_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laam_laser_control::MsgEmission_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::laam_laser_control::MsgEmission_<ContainerAllocator1> & lhs, const ::laam_laser_control::MsgEmission_<ContainerAllocator2> & rhs)
{
  return lhs.emission == rhs.emission;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::laam_laser_control::MsgEmission_<ContainerAllocator1> & lhs, const ::laam_laser_control::MsgEmission_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace laam_laser_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::laam_laser_control::MsgEmission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laam_laser_control::MsgEmission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laam_laser_control::MsgEmission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laam_laser_control::MsgEmission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laam_laser_control::MsgEmission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laam_laser_control::MsgEmission_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laam_laser_control::MsgEmission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b41438f20140254925ccd78f3541f322";
  }

  static const char* value(const ::laam_laser_control::MsgEmission_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb41438f201402549ULL;
  static const uint64_t static_value2 = 0x25ccd78f3541f322ULL;
};

template<class ContainerAllocator>
struct DataType< ::laam_laser_control::MsgEmission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laam_laser_control/MsgEmission";
  }

  static const char* value(const ::laam_laser_control::MsgEmission_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laam_laser_control::MsgEmission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool emission\n"
;
  }

  static const char* value(const ::laam_laser_control::MsgEmission_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laam_laser_control::MsgEmission_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.emission);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgEmission_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laam_laser_control::MsgEmission_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laam_laser_control::MsgEmission_<ContainerAllocator>& v)
  {
    s << indent << "emission: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emission);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAAM_LASER_CONTROL_MESSAGE_MSGEMISSION_H
