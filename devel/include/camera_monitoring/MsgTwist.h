// Generated by gencpp from file camera_monitoring/MsgTwist.msg
// DO NOT EDIT!


#ifndef CAMERA_MONITORING_MESSAGE_MSGTWIST_H
#define CAMERA_MONITORING_MESSAGE_MSGTWIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace camera_monitoring
{
template <class ContainerAllocator>
struct MsgTwist_
{
  typedef MsgTwist_<ContainerAllocator> Type;

  MsgTwist_()
    : header()
    , linear_x(0.0)
    , linear_y(0.0)
    , linear_z(0.0)
    , linear_speed(0.0)
    , speed_averaged(0.0)  {
    }
  MsgTwist_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , linear_x(0.0)
    , linear_y(0.0)
    , linear_z(0.0)
    , linear_speed(0.0)
    , speed_averaged(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _linear_x_type;
  _linear_x_type linear_x;

   typedef float _linear_y_type;
  _linear_y_type linear_y;

   typedef float _linear_z_type;
  _linear_z_type linear_z;

   typedef float _linear_speed_type;
  _linear_speed_type linear_speed;

   typedef float _speed_averaged_type;
  _speed_averaged_type speed_averaged;





  typedef boost::shared_ptr< ::camera_monitoring::MsgTwist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_monitoring::MsgTwist_<ContainerAllocator> const> ConstPtr;

}; // struct MsgTwist_

typedef ::camera_monitoring::MsgTwist_<std::allocator<void> > MsgTwist;

typedef boost::shared_ptr< ::camera_monitoring::MsgTwist > MsgTwistPtr;
typedef boost::shared_ptr< ::camera_monitoring::MsgTwist const> MsgTwistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_monitoring::MsgTwist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_monitoring::MsgTwist_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera_monitoring::MsgTwist_<ContainerAllocator1> & lhs, const ::camera_monitoring::MsgTwist_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.linear_x == rhs.linear_x &&
    lhs.linear_y == rhs.linear_y &&
    lhs.linear_z == rhs.linear_z &&
    lhs.linear_speed == rhs.linear_speed &&
    lhs.speed_averaged == rhs.speed_averaged;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera_monitoring::MsgTwist_<ContainerAllocator1> & lhs, const ::camera_monitoring::MsgTwist_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera_monitoring

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::camera_monitoring::MsgTwist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_monitoring::MsgTwist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_monitoring::MsgTwist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_monitoring::MsgTwist_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_monitoring::MsgTwist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_monitoring::MsgTwist_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_monitoring::MsgTwist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8ac0f689767f9a8e47b7244c6d20dfc";
  }

  static const char* value(const ::camera_monitoring::MsgTwist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8ac0f689767f9a8ULL;
  static const uint64_t static_value2 = 0xe47b7244c6d20dfcULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_monitoring::MsgTwist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_monitoring/MsgTwist";
  }

  static const char* value(const ::camera_monitoring::MsgTwist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_monitoring::MsgTwist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 linear_x\n"
"float32 linear_y\n"
"float32 linear_z\n"
"float32 linear_speed\n"
"float32 speed_averaged\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::camera_monitoring::MsgTwist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_monitoring::MsgTwist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.linear_x);
      stream.next(m.linear_y);
      stream.next(m.linear_z);
      stream.next(m.linear_speed);
      stream.next(m.speed_averaged);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgTwist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_monitoring::MsgTwist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_monitoring::MsgTwist_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "linear_x: ";
    Printer<float>::stream(s, indent + "  ", v.linear_x);
    s << indent << "linear_y: ";
    Printer<float>::stream(s, indent + "  ", v.linear_y);
    s << indent << "linear_z: ";
    Printer<float>::stream(s, indent + "  ", v.linear_z);
    s << indent << "linear_speed: ";
    Printer<float>::stream(s, indent + "  ", v.linear_speed);
    s << indent << "speed_averaged: ";
    Printer<float>::stream(s, indent + "  ", v.speed_averaged);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_MONITORING_MESSAGE_MSGTWIST_H
