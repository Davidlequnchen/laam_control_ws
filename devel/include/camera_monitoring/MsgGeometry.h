// Generated by gencpp from file camera_monitoring/MsgGeometry.msg
// DO NOT EDIT!


#ifndef CAMERA_MONITORING_MESSAGE_MSGGEOMETRY_H
#define CAMERA_MONITORING_MESSAGE_MSGGEOMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace camera_monitoring
{
template <class ContainerAllocator>
struct MsgGeometry_
{
  typedef MsgGeometry_<ContainerAllocator> Type;

  MsgGeometry_()
    : header()
    , major_axis(0.0)
    , minor_axis(0.0)
    , orientation(0.0)
    , x(0.0)
    , y(0.0)
    , minor_axis_average(0.0)  {
    }
  MsgGeometry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , major_axis(0.0)
    , minor_axis(0.0)
    , orientation(0.0)
    , x(0.0)
    , y(0.0)
    , minor_axis_average(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _major_axis_type;
  _major_axis_type major_axis;

   typedef float _minor_axis_type;
  _minor_axis_type minor_axis;

   typedef float _orientation_type;
  _orientation_type orientation;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _minor_axis_average_type;
  _minor_axis_average_type minor_axis_average;





  typedef boost::shared_ptr< ::camera_monitoring::MsgGeometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_monitoring::MsgGeometry_<ContainerAllocator> const> ConstPtr;

}; // struct MsgGeometry_

typedef ::camera_monitoring::MsgGeometry_<std::allocator<void> > MsgGeometry;

typedef boost::shared_ptr< ::camera_monitoring::MsgGeometry > MsgGeometryPtr;
typedef boost::shared_ptr< ::camera_monitoring::MsgGeometry const> MsgGeometryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_monitoring::MsgGeometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_monitoring::MsgGeometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera_monitoring::MsgGeometry_<ContainerAllocator1> & lhs, const ::camera_monitoring::MsgGeometry_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.major_axis == rhs.major_axis &&
    lhs.minor_axis == rhs.minor_axis &&
    lhs.orientation == rhs.orientation &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.minor_axis_average == rhs.minor_axis_average;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera_monitoring::MsgGeometry_<ContainerAllocator1> & lhs, const ::camera_monitoring::MsgGeometry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera_monitoring

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::camera_monitoring::MsgGeometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_monitoring::MsgGeometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_monitoring::MsgGeometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_monitoring::MsgGeometry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_monitoring::MsgGeometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_monitoring::MsgGeometry_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_monitoring::MsgGeometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3adfca161cefb9cf304720422e5ec87c";
  }

  static const char* value(const ::camera_monitoring::MsgGeometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3adfca161cefb9cfULL;
  static const uint64_t static_value2 = 0x304720422e5ec87cULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_monitoring::MsgGeometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_monitoring/MsgGeometry";
  }

  static const char* value(const ::camera_monitoring::MsgGeometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_monitoring::MsgGeometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 major_axis\n"
"float32 minor_axis\n"
"# float32 circle_diameter\n"
"float32 orientation\n"
"float32 x\n"
"float32 y\n"
"float32 minor_axis_average\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::camera_monitoring::MsgGeometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_monitoring::MsgGeometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.major_axis);
      stream.next(m.minor_axis);
      stream.next(m.orientation);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.minor_axis_average);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgGeometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_monitoring::MsgGeometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_monitoring::MsgGeometry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "major_axis: ";
    Printer<float>::stream(s, indent + "  ", v.major_axis);
    s << indent << "minor_axis: ";
    Printer<float>::stream(s, indent + "  ", v.minor_axis);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "minor_axis_average: ";
    Printer<float>::stream(s, indent + "  ", v.minor_axis_average);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_MONITORING_MESSAGE_MSGGEOMETRY_H
